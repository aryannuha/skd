#include <Wire.h> 
#include <LiquidCrystal_I2C.h>
#define ENC_A 2
#define ENC_B 3
#define IN1 5
#define IN2 6

LiquidCrystal_I2C lcd(0x27,20,4);  // set the LCD address to 0x27 for a 16 chars and 2 line display

char tempBuffer[10]; // Buffer to hold formatted string
unsigned long lastTime, lastRPMTime;
double Input, Output, Setpoint;
double errSum, lastErr;
double kp, ki, kd;
int pos;

// volatile int encoderCount = 0;
// const int PPR = 100; // Pulses per Revolution (sesuaikan dengan spesifikasi encoder)
// double rpm = 0;

void Compute();
void SetTunings(double Kp, double Ki, double Kd);
void readEncoder();
// void calculateRPM();

void setup() {
  Serial.begin(9600);
  
  // Encoder pins
  pinMode(ENC_A, INPUT);
  pinMode(ENC_B, INPUT);
  attachInterrupt(digitalPinToInterrupt(ENC_A), readEncoder, RISING);

  // Motor driver pins
  pinMode(IN1, OUTPUT);
  pinMode(IN2, OUTPUT);
  
  // Initialize variables
  lastTime = millis();
  lastRPMTime = millis();
  errSum = 0;
  lastErr = 0;

  lcd.init();
  lcd.backlight();
}

void loop() {
  // Update setpoint and PID tunings from potentiometers
  Setpoint = analogRead(A0) * 0.25; // Scale to 0-255
  double Kp = analogRead(A1) * 0.1; // Scale to appropriate range
  double Ki = analogRead(A2) * 0.01; // Scale to appropriate range
  double Kd = 0; // If you want, enable tuning via A3
  SetTunings(Kp, Ki, Kd);
  
  // Calculate RPM
  // calculateRPM();

  // Update PID input with RPM
  Input = pos;
  
  // Compute PID
  Compute();
  
  // // Constrain output to 0-255
  // Output = constrain(Output, 0, 255);
  
  // // Write output to motor driver
  // if (Output > 0) {
  //   analogWrite(IN1, Output);
  //   analogWrite(IN2, 0);
  // } else {
  //   analogWrite(IN1, 0);
  //   analogWrite(IN2, 0);
  // }

   // motor power
  float pwr = fabs(Output);
  if( pwr > 255 ){
    pwr = 255;
  }
 
  // motor direction
  int dir = 1;
  if(Output<0){
    dir = -1;
  }
 
  // signal the motor
  setMotor(dir,pwr,IN1,IN2);
  
  // Debugging output
  Serial.print("Setpoint: ");
  Serial.print(Setpoint);
  Serial.print(", Pos: ");
  Serial.print(pos);
  // Serial.print(", Encoder Count: ");
  // Serial.print(encoderCount); // Debugging
  Serial.print(", Output: ");
  Serial.println(pwr);

  // Print to LCD with one decimal place
  lcd.setCursor(0,0);
  lcd.print("Sp:");
  lcd.setCursor(3,0);
  lcd.print(dtostrf(Setpoint, 5, 1, tempBuffer)); // 5 is width, 1 is decimal places
  lcd.setCursor(8,0);
  lcd.print("Kp:");
  lcd.setCursor(11,0);
  lcd.print(dtostrf(Kp, 5, 1, tempBuffer));

  lcd.setCursor(0,1);
  lcd.print("Ki:");
  lcd.setCursor(3,1);
  lcd.print(dtostrf(Ki, 5, 1, tempBuffer));
  lcd.setCursor(8,1);
  lcd.print("Kd:");
  lcd.setCursor(11,1);
  lcd.print(dtostrf(Kd, 5, 1, tempBuffer));
  
  delay(100); // Small delay for stability
}

void Compute() {
  /* How long since we last calculated */
  unsigned long now = millis();
  double timeChange = (double)(now - lastTime);
  
  /* Compute all the working error variables */
  double error = Setpoint - Input;
  errSum += (error * timeChange);
  double dErr = (error - lastErr) / timeChange;
  
  /* Compute PID Output */
  Output = kp * error + ki * errSum + kd * dErr;
  
  /* Remember some variables for next time */
  lastErr = error;
  lastTime = now;
}

void SetTunings(double Kp, double Ki, double Kd) {
  kp = Kp;
  ki = Ki;
  kd = Kd;
}

void readEncoder() {
  int b = digitalRead(ENC_B);
  if(b > 0){
    pos++;
  }
  else{
    pos--;
  }
}

void setMotor(int dir, int pwmVal, int in1, int in2){
  if(dir == 1){
    analogWrite(in1,pwmVal);
    analogWrite(in2,LOW);
  }
  else if(dir == -1){
    analogWrite(in1,LOW);
    analogWrite(in2,pwmVal);
  }
  else{
    analogWrite(in1,LOW);
    analogWrite(in2,LOW);
  }  
}

// void calculateRPM() {
//   unsigned long now = millis();
//   double elapsedTime = (now - lastRPMTime) / 1000.0; // Waktu dalam detik
  
//   // Hindari pembagian dengan nol
//   if (elapsedTime > 0) {
//     rpm = (encoderCount / (double)PPR) / elapsedTime * 60.0;
//   } else {
//     rpm = 0; // Jika elapsedTime terlalu kecil, anggap RPM = 0
//   }

//   // Reset encoder count dan update waktu terakhir
//   encoderCount = 0;
//   lastRPMTime = now;
// }
